
<style>

  #original {
    display: none;
  }
  #viewer {
    width: 100%;
    padding: 1rem;
    overflow-y: auto;
  }

  #editor-text {
    width: 100%;
    height: 100%;
    background-color: white;
    font-size: 1.1rem;

  }

  .day-container {
    margin-bottom: 3rem;
    border: 1px solid #eee;
    border-radius: 8px;
    padding: 1rem;
    background-color: white;
  }

  .day-title {
    font-weight: bold;
    font-size: 1.5rem;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid #eee;
    color: #333;
  }

  .timeline-container {
    display: flex;
    margin-bottom: 1rem;
    width: 100%;
  }

  .timeline {
    position: relative;
    width: 100%;
    border-left: 2px solid #333;

    height: 70rem;
    margin-right: 1rem;
    margin-left: 1rem;
    flex-shrink: 0;
  }

  .timeline-entry {
    position: absolute;
    display: flex;
    align-items: center;
    left: 0;
    transform: translateY(-50%);
    width: calc(100% - 50px);
    font-size: 0.8rem;
  }

  .timeline-line {
    height: 1px;
    width: 30px;
    background-color: #333;
    flex-shrink: 0;
  }

  .timeline-content {
    margin-left: 0.5rem;
    background-color: #f5f5f5;
    padding: 0.5rem 0.8rem;
    border-radius: 4px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    width: 100%;
    flex-grow: 1;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .time-marker {
    position: absolute;
    left: -30px;
    font-size: 0.8rem;
    color: #666;
    transform: translateY(-50%);
  }

  .time-label {
    position: absolute;
    left: 40px;
    font-size: 0.8rem;
    color: #333;
    font-weight: bold;
    transform: translateY(-50%);
    width: 40px;
    text-align: left;
  }
</style>


<h1><%= @page.date %></h1>

<div id="container">
  <textarea id="original"><%= @page.content %></textarea>
  <div id="viewer">
    aaaa
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const editorText = document.getElementById('original');
    const viewer = document.getElementById('viewer');

    // Function to parse text and create timeline visualization
    function updateViewer() {
      const text = editorText.value;
      const days = parseDays(text);

      // Clear viewer
      viewer.innerHTML = '';

      // Create timeline for each day
      days.forEach(day => {
        const dayContainer = createDayTimeline(day);
        viewer.appendChild(dayContainer);
      });
    }

    // Extract time from entry text
    function extractTime(text) {
      // Match patterns like "10時半", "1030", "10:30", "1400-1500", etc.
      const timePatterns = [
        { regex: /^(\d{1,2})時半/, converter: (match) => parseInt(match[1]) * 60 + 30 },
        { regex: /^(\d{1,2})時/, converter: (match) => parseInt(match[1]) * 60 },
        { regex: /^(\d{2})(\d{2})/, converter: (match) => parseInt(match[1]) * 60 + parseInt(match[2]) },
        { regex: /^(\d{1,2}):(\d{2})/, converter: (match) => parseInt(match[1]) * 60 + parseInt(match[2]) },
        { regex: /^-(\d{2})(\d{2})/, converter: (match) => parseInt(match[1]) * 60 + parseInt(match[2]) },
        { regex: /^(\d{2})(\d{2})-/, converter: (match) => parseInt(match[1]) * 60 + parseInt(match[2]) }
      ];

      for (const pattern of timePatterns) {
        const match = text.match(pattern.regex);
        if (match) {
          return pattern.converter(match);
        }
      }

      return null; // No time found
    }

    // Parse text into days with entries
    function parseDays(text) {
      const lines = text.split('\n').map(line => line.trim()).filter(line => line);
      const days = [];
      let currentDay = null;
      let currentEntries = [];
      let earlyMorningEntries = [];

      for (let i = 0; i < lines.length; i++) {
        const line = lines[i];

        // Check if line is a date (format: YYYY/MM/DD)
        if (/^\d{4}\/\d{2}\/\d{2}$/.test(line)) {
          // If we already have a day, add it to the days array
          if (currentDay) {
            // Add early morning entries from the next day (if any)
            if (earlyMorningEntries.length > 0) {
              currentEntries = currentEntries.concat(earlyMorningEntries);
              earlyMorningEntries = [];
            }

            days.push({
              date: currentDay,
              entries: currentEntries
            });
          }

          // Start a new day
          currentDay = line;
          currentEntries = [];

          // Skip the "---" line that follows the date
          if (i + 1 < lines.length && lines[i + 1] === '---') {
            i++;
          }
        }
        // If we have a current day and the line is not a separator, add it as an entry
        else if (currentDay && line !== '---') {
          // Check if this is an early morning entry (0:00-4:00)
          const timeInMinutes = extractTime(line);
          if (timeInMinutes !== null) {
            const hours = timeInMinutes / 60;

            // If it's an early morning entry and we're not on the first day
            if (hours < 4 && days.length > 0) {
              earlyMorningEntries.push(line);
            } else {
              currentEntries.push(line);
            }
          } else {
            currentEntries.push(line);
          }
        }
      }

      // Add the last day if it exists
      if (currentDay) {
        days.push({
          date: currentDay,
          entries: currentEntries
        });
      }

      // Process days to move early morning entries to the previous day
      for (let i = 1; i < days.length; i++) {
        const currentDay = days[i];
        const previousDay = days[i - 1];

        // Find early morning entries (0:00-4:00)
        const earlyMorningEntries = [];
        const regularEntries = [];

        currentDay.entries.forEach(entry => {
          const timeInMinutes = extractTime(entry);
          if (timeInMinutes !== null) {
            const hours = timeInMinutes / 60;

            if (hours < 4) {
              earlyMorningEntries.push(entry);
            } else {
              regularEntries.push(entry);
            }
          } else {
            regularEntries.push(entry);
          }
        });

        // Move early morning entries to the previous day
        previousDay.entries = previousDay.entries.concat(earlyMorningEntries);
        currentDay.entries = regularEntries;
      }

      return days;
    }

    // Format time for display (e.g., 1430 -> 14:30)
    function formatTime(minutes) {
      const hours = Math.floor(minutes / 60);
      const mins = minutes % 60;
      return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;
    }

    // Create timeline visualization for a day
    function createDayTimeline(day) {
      const dayContainer = document.createElement('div');
      dayContainer.className = 'day-container';

      const dayTitle = document.createElement('div');
      dayTitle.className = 'day-title';
      dayTitle.textContent = day.date;
      dayContainer.appendChild(dayTitle);

      const timelineContainer = document.createElement('div');
      timelineContainer.className = 'timeline-container';

      const timeline = document.createElement('div');
      timeline.className = 'timeline';

      // Add time markers (0:00, 4:00, 8:00, 12:00, 16:00, 20:00, 24:00)
      [0, 4, 8, 12, 16, 20, 24].forEach(hour => {
        const marker = document.createElement('div');
        marker.className = 'time-marker';
        marker.style.top = `${(hour / 24) * 100}%`;
        marker.textContent = `${hour}:00`;
        timeline.appendChild(marker);
      });

      timelineContainer.appendChild(timeline);
      dayContainer.appendChild(timelineContainer);

      // Add entries to timeline
      day.entries.forEach(entry => {
        const timeInMinutes = extractTime(entry);
        if (timeInMinutes !== null) {
          // Convert minutes to position (0-24 hours)
          let hours = timeInMinutes / 60;

          // Handle times after midnight (e.g., 0230)
          if (hours < 4) {
            hours += 24;
          }

          const position = (hours / 24) * 100;

          const entryElement = document.createElement('div');
          entryElement.className = 'timeline-entry';
          entryElement.style.top = `${position}%`;

          const line = document.createElement('div');
          line.className = 'timeline-line';

          const content = document.createElement('div');
          content.className = 'timeline-content';
          content.textContent = entry.replace(/^\d{1,4}[-:]?\d{0,4}\s*/, '').trim(); // Remove time prefix from display

          // Add time label
          const timeLabel = document.createElement('div');
          timeLabel.className = 'time-label';
          timeLabel.textContent = formatTime(timeInMinutes);

          entryElement.appendChild(timeLabel);
          entryElement.appendChild(line);
          entryElement.appendChild(content);
          timeline.appendChild(entryElement);
        }
      });

      return dayContainer;
    }

    // Initial update
    updateViewer();
    
  });
</script>
